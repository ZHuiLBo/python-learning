第一章：基础知识
1、交互式解释器；命令行版本
2、>>> 为提示符
3、整数除法
    正常情况下：python中，1/2输出值为0，自动去掉小数部分
    想要在python中使用普通除法，方法如下：
        @利用实数（包含小数点的十进制数）：1.0/2.0输出值为0.5
        @改变除法的执行方式，在程序前加上语句 
        >>>from __future__ import division
        @如果通过命令行运行Python，可以使用命令开关-Qnew
    Python中双斜线（//）执行整除操作，对浮点数也有用。（例：1.0 // 2.0 输出值为 0.0）
4、Python中百分号（%）为除余运算法，对浮点数也有用。 （例：2.75 % 0.5 输出值为 0.25）
5、Python中两个乘号（**）为幂（乘方）运算符。（例：2 ** 3 输出值为 8）
    幂运算符优先级>取反（一元减运算符）。（例 - 3 ** 2 输出值为 -9 ），加括号可显式改变优先级
6、Python可以处理很大的数
    普通整数不能大于2147483647（2 ** 31 - 1），也不能小于-2147483648（- 2 ** 31）
    Python长整型数以L结尾 （例：100000000000000000000000L）
    长整型数和普通数可以混用，除非需要进行类型检查
7、Python中的十六进制和八进制的写法
    十六进制
    >>> 0xAF
    175
    八进制
    >>> 010
    8
    十六进制和八进制首数字均为0
8、Python中的变量（variable）
    变量是代表某值的名字
    赋值操作 （例： x = 3）
    使用变量之前需要对其进行赋值
    变量名可以包含数字、字母和下划线（—），不能以数字开头
9、表达式和语句
    区别：
    @解释器总是把所有表达式的值打印出来
    @表达式是某事，语句是做某事，语句改变了事物。
10、赋值语句、print语句
11、获取用户的输入
    name = input("What is your name ?")
12、条件语句
    >>>if 1==1 : print("One equals to one")
    交互式解释器内使用if语句时，需要按两次回车，if语句才能执行
13、内建函数（例如pow等标准函数）
    pow(2,3) 输出值为 8  【幂运算】
    abs(-8) 输出值为 8   【绝对值】
    round(2.4) 输出值为 2.0 【把浮点数四舍五入为最接近的整数值】
14、模块（可以看做是导入到Python以增强其功能的扩展）
    用import来导入模块
    >>> import math      【import 模块名】
    >>> math.sqrt(4)     【开平方】
    >>> math.floor(3.8)  【向下取整】
    3.0
    >>> math.ceil(3.2)   【向上取整】
    4.0
    浮点数转换为整数：用int函数
    >>> int(math.floor(3.8))
    3
    类似的类型转换函数还有float、long函数
    导入模块后，不想每次用模块中的函数时都要带上模块名，而且确定不会导入多个同名函数（从不同模块中导入）
    可以用import命令的另一种形式
    >>> from math import sqrt   【from 模块名 import 函数名】
    >>> sqrt(9)
    3.0
    可以用变量来引用函数
    >>> import math
    >>> foo=math.sqrt
    >>> foo(9)
    3
    math模块中的sqrt只能处理浮点数，利用cmath（即complex math，复数）模块中的sqrt可以处理复数
    >>> import cmath
    >>>cmath.sqrt(-1)
    1j      【虚数均以j结尾】
    应坚持使用普通的import
    Python中没有单独的虚数类型，他们被看做实数部分为0的复数
15、Python中的注释为#
16、单引号和双引号
    没什么本质区别，都可以用，混用的时候注意一下
    >>> print('"Hello world!" she said')
    "Hello world!" she said
    >>> print("It 's me")
    It's me
    可以使用反斜线（\）对字符串中的引号进行转义
17、字符串拼接
    连续写出两个字符串时会自动拼接
    >>> "Hello " "zhaohui"
    'Hello zhaohui'
    如下写是会报错的
    >>> x="Hello "
    >>> y="zhaohui"
    >>> x y
    SyntaxError:invaild Syntax
    正常凭借字符串，使用加号（+）
    >>> "Hello " + "zhaohui"
    'Hello zhaohui'
18、字符串表示，str和repr
    在Python中把值转换为字符串的三种方式如下
    @ 函数str：把值转换为合理形式的字符串，让字符串更易阅读
    >>> print str("Hello world")
    Hello world
    >>> print str(10000L)
    10000
    @ 函数repr：把值转换为合法的python表达式
    >>> print repr("Hello world")
    'Hello world'
    >>> print repr(10000L)
    10000L
    @ 反引号(``)：把值转换为合法的python表达式，与函数repr作用相同
    >>> temp = 42
    >>> print "The temperature is " + temp
    【会报错】
    >>> print "The temperature is " + `temp`
    The temperature is 42
19、Input 和 raw_input比较
    @input
    input要求用户输入的是合法的python表达式，否则会报错
    >>> name = input("What is your name ? ")
    >>>print "Hello " + name + " !"
    如果用户直接输入 zhaohui,是会报错的，得输入 'zhaohui' (带引号才是标准的python字符串)
    @raw_input
    raw_input会把所有用户的输入当做是原始数据（raw data），放入字符串中
    >>> input("Enter a number : ")
    Enter a number : 3
    3
    >>> raw_input("Enter a number : ")
    Enter a number : 3
    '3'
20、长字符串
    @跨多行的长字符串可以使用三引号('''),中间可以有单引号和双引号，无需转义
    @普通字符串也可以跨行。如果一行之中最后一个字符是反斜线，换行符本身被转义，即被忽略。也适用于表达式和语句
21、原始字符串
    原始字符串以r开头，原始字符串不会把反斜线当做特殊字符，在原始字符串中输入的每个字符都会与书写方式保持一致
    >>> print r"C:\nowhere"
    C:\nowhere
    原始字符串的最后一个字符不能是反斜线
22、Unicode字符串
    Python中的普通字符串在内部是以8位的ASCII码形成存储的，Unicode字符串则存储为16为unicode字符
    Unicode字符使用u前缀

-------------------------------------------------------------------------------------------------------

第二章：列表和元组
1、python中最基本的数据结构：序列（sequence）
    序列的索引均从0开始，最后一个元素标记为-1
    python包含6种内建的序列：
    @列表（list）
    @元组（tuple）
    @字符串
    @Unicode字符串
    @buffer对象
    @xrange对象
2、列表和元组
    列表和元组主要区别：列表可以修改，元组不能修改
    一般来说，几乎所有的情况下列表都可以替代元组（元组作为字典的键例外，因为键不可修改，所以不能使用列表）
3、列表
    列表的各个元素通过逗号分隔，写在方括号中，如下:
    >>> zh = [ 'zhaohui' , 21 ]
    序列也可以包含其他序列，如下:
    >>> zh = [ 'zhaohui' , 21 ]
    >>> lb = [ 'libo' , 22 ]
    >>> database = [ zh , lb ]
    [['zhaohui', 21], ['libo', 22]]
4、容器（Container）：也是Python的数据结构
    容器基本上是包含其他对象的任意对象。
    序列（如列表和元组）和映射（例如字典）是两类主要的容器。
    序列中每个元素有自己的编号
    映射中每个元素有自己的名字（也称为键）
    至于既不是序列又不是映射的容器，集合（set）就是一个例子
5、通用序列操作
    通用序列操作如下：
    @索引（indexing）
    @分片（sliceing）
    @加（adding）
    @乘（multiplying）
    @检查某个元素是否属于序列的成员（成员资格）
    Python还有计算序列长度、找出最大元素和最小元素的内建函数
    【迭代（iteration）：依次对序列中的每个元素重复执行某些操作】
6、索引（indexing）
    索引用于访问单个元素
    索引方式如下
    >>> geeting = "Hello"
    >>> geeting[0]
    'H'
    字符串就是一个由字符组成的序列。
    字符串的字面值可以直接索引，如下，其他序列也可以
    >>> "Hello"[1]
    'e'
    如果一个函数返回一个序列，也可以直接对这个序列进行索引，如下：
    >>> fourth = raw_input("Year : ")[3]
    Year : 2005
    >>> fourth
    '5'
7、分片（sliceing）
    分片用于访问一定范围内的元素
    分片通过冒号相隔的两个索引来实现,第一个索引为要提取部分的第一个元素的编号，第二个索引为分片剩下部分第一个元素的编号
    >>> numbers = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    >>> numbers[3:8]
    [4, 5, 6, 7, 8]
    要取大于3的元素可以如下
    >>> numbers[2:]
    要取倒数三个数
    >>> numbers[-3:]
    要取前三个元素
    >>> numbers[:3]
    要复制整个序列
    >>> numbers2 = numbers[:]
    分片默认步长（step length）为1
    >>> numbers = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    >>> numbers[0:10:2]    【此处步长设置为2】
    [1, 3, 5, 7, 9]
    需要将每4个元素提取第一个元素，如下
    >>> numbers[::4]
    [1,5,9]
    步长可以为负数，即从右到左提取元素
8、序列相加（adding）
    通过加号可以进行序列的连接操作
    >>> [1, 2, 3] +　[4, 5, 6]
    [1, 2, 3, 4, 5, 6]
    相同类型的序列才能进行连接操作
9、乘法（multiplying）
    数字x乘以一个序列会生成新的序列，在新的序列中，原来的序列会被重复x次
    >>> 'python' * 5
    'pythonpythonpythonpythonpython'
    >>> [42] * 5
    [ 42, 42, 42, 42, 42]
    空列表可以用([])表示
    None是Python的内建值，表示“这里什么都没有”
    初始化长度为10的列表，如下：
    >>> sequence = [None] * 10
10、成员资格
    为了检查一个值是否在序列中，可以使用in运算符
    in运算符用于检查某个条件是否为真，返回true或者false。
    这样的运算符叫做布尔运算符，真值叫做布尔值
    >>> 'w' in  'permissions'
    false
    >>> '$$$' in '$$$ Get Rich Now! $$$'   【在早期的python中，这种写法会报错，因为字符串的成员是字符】
    true
11、长度、最小值和最大值
    内建函数len、min和max非常有用
    len函数返回序列包含的元素数量
    min函数返回序列最小值
    max函数返回序列最大值
    例如：
    numbers = [100, 34, 678]
    >>> len(numbers)
    3
    >>> min(numbers)
    34
    >>> max(numbers)
    678
    >>> max(2,3)
    3
    >>> min(9,2,3,4)
    2
12、列表（list）
    list函数：将其他类型的序列转化为列表类型，如下：
    >>> list("Hello")
    [ 'H', 'e', 'l', 'l', 'o' ]
    将由字符组成的列表转化为字符串可以用如下表达式
    ''.join(somelist)  【somelist是由字符组成的列表】
    列表是可以修改的
    基本的列表操作
        @列表可以使用所有使用于序列的标准操作，如索引、分片、连接和乘法
        @元素赋值
        >>> x = [1, 1, 1]
        >>> x[2] = 3
        >>> x
        [1, 1, 3]
        不能给位置不存在的元素进行赋值
        @删除元素：使用del语句
        >>> names = [ 'zhaohui', 'libo', 'zhaofan']
        >>> del names[1]
        >>> names
        ['zhaohui', 'zhaofan']
        @分片赋值
        程序可以一次为多个元素赋值
        >>> name = list("zhaohui")
        >>> name[4:] = list("fan")
        >>> name = ''.join(name)
        >>> name
        "zhaofan"
        分片赋值时，还可以使用与原序列不等长的序列将分片替换
        >>> string1 = list('path')
        >>> string1[1:] = list('ython')
        >>> print ''.join(string1)
        分片赋值语句可以在不需要替换任何原有元素的情况下插入新元素（其实只是替换了空的分片，实际上是插入了一个序列）
        >>> number = [1, 5]
        >>> number[1:1] = [2, 3, 4]
        >>> number
        [1, 2, 3, 4, 5]
        通过分片删除元素也可以
        >>> number = [1, 2, 3]
        >>> number[0:1] = []
        >>> number
        [2, 3]
    列表方法
        方法一个与某些对象有紧密联系的函数，对象可能是列表，数字，字符串或其他类型的对象
        方法的调用如下：
        对象.方法（参数）
        列表提供的方法如下：
            @ append方法：用于在列表末尾追加新的对象【直接修改列表】
            >>> lst = [1, 2]
            >>> lst.append(3)
            >>> lst
            [1, 2, 3]
            @ count方法：统计某个元素在列表中出现的次数
            >>> lst = [1, 2, 3, 2, 3, 4, 5]
            >>> lst.count(3)
            2
            @ extend方法：可以在列表的末尾一次性追加另一个序列中的多个值（即可以用新列表扩展原有的列表）【直接修改列表】
            >>> a = [1, 2]
            >>> b = [3, 4]
            >>> a.extend(b)
            >>> a
            [1, 2, 3, 4]
            @ index方法：用于从列表中找出某个值第一个匹配项的索引位置
            >>> names = ['zhaohui', 'zhaofan', 'libo']
            >>> names.index('libo')
            2
            >>> names.index('zhao')
            【会报错，因为没找到这个元素】
            @ insert方法：用于将对象插入到列表中  【直接修改列表】
            >>> numbers = [1, 3]
            >>> numbers.insert(1, 'two')
            >>> numbers
            [1, 'two', 3]
            @ pop方法：移除列表的一个元素（默认是最后一个），并且返回该元素的值 【直接修改列表】
            >>> numbers = [1, 2, 3]
            >>> numbers.pop()
            3
            >>> numbers
            [1, 2]
            >>> numbers.pop(0)  【移除第一个元素】
            [2]
            pop方法是唯一一个既能修改列表又返回元素值的列表方法
            #python中的pop相当于出栈，append相当于入栈
            @ remove方法：用于移除列表中某个值的第一个匹配项 【直接修改列表】
            >>> names = ['zhaohui', 'zhaofan', 'zhaohui', 'zhaofan']
            >>> names.remove('zhaofan')
            >>> names
            ['zhaohui', 'zhaohui', 'zhaofan']
            >>> names.remove('libo')
            【会报错，因为没有找到匹配的元素】
            @ reverse方法：将列表中的元素反向存放 【直接修改列表】
            >>> numbers = [1, 2, 3]
            >>> numbers.reverse()
            >>> numbers
            [3, 2, 1]
            @ sort方法：用于在原位置对列表进行排序，默认升序 【直接修改列表，无返回值！！！】
            >>> numbers = [2, 1, 4, 3]
            >>> numbers.sort()
            >>> numbers
            [1, 2, 3, 4]
            需要一个排序好的副本，又要保留原有的列表不变时，如下做法是错的！！！
            >>> x = [2, 1, 4, 3]
            >>> y = x.sort()  # Don't do this
            正确做法是，先赋值给y，在对y排序
            >>> x = [2, 1, 4, 3]
            >>> y = x[:]   #不可以写成 y = x，因为这样就让x和y指向同一个列表了！！！！！
            # x[:] 是一种很有效率的复制整个列表的方法
            >>> y.sort()
            >>> x
            >>> y
            另外一种获得已排序副本的方法是使用 sorted函数
            >>> x = [2, 1, 3]
            >>> y = sorted(x)
            >>> x
            [2, 1, 3]
            >>> y
            [1, 2, 3]
            sorted函数可以用于任何序列，却总是返回一个列表
            >>>sorted('zhaohui')
            ['a', 'h', 'h', 'i', 'o', 'u', 'z']
        高级排序
            @ 如果希望元素按照自定义的方式排序，可以通过compare(x,y)的形式自定义比较函数。
            x>y时，compare(x,y)返回1（正数）；x<y时，compare(x,y)返回-1（负数）；x==y时,compare(x,y)返回0
            定义好该函数后，提供给sort方法作参数。
            内建函数cmp提供了比较函数的默认实现方式：
            >>> cmp(42, 32)
            1
            >>> cmp(32, 42)
            -1
            >>> cmp(10, 10)
            0
            >>> number = [2, 1, 3]
            >>> number.sort(cmp)
            >>> number
            [1, 2, 3]
            sort还有另外两个可选参数：key和reverse，要使用他们的话就要通过名字来指定（这叫做关键字参数）
            @ 关键字参数key和cmp类似，必须提供一个在排序过程中使用的函数，
            但该函数不是直接确定对象大小，而是为每个元素创建一个键，然后所有元素根据键来排序。
            如果要根据元素长度进行排序，可以使用len函数作为键函数，如下：
            >>> x = ['zhaohui', 'libo', 'zhaohuiyin']
            >>> x.sort(key=len)
            >>> x
            ['libo', 'zhaohui', 'zhaohuiyin']
            @ 关键字参数reverse是简单的布尔值（True或者False），用来指明列表是否要进行反向排序
            >>> x = [2, 1, 3]
            >>> x.sort(reverse=true)
            >>> x
            [3, 2, 1]
            cmp、key、reverse参数都可以用于sorted函数。
            在多数情况下，为cmp或key提供自定义函数是非常有用的。
13、元组（tuple）：不可改变的序列
    用逗号分隔了一些值，就自动创建了元组
    >>> 1, 2, 3 
    (1, 2, 3)
    空元组可以用没有包含内容的两个圆括号来表示
    >>> ()
    ()
    创建包含一个值的元组必须加个逗号
    >>> 42,
    (42,)
    逗号是很重要的，只添加括号都不行
    >>> 3 * (40 + 2)
    126      
    >>> 3 * (40 + 2,)
    (42, 42, 42)
    tuple函数作用与list函数类似：以一个序列作为参数并把它转换为元组，如果输入参数本身是元组，就会被原样返回（tuple和list准确说是一种类型）
    >>> tuple([1, 2, 3])
    (1, 2, 3)
    >>> tuple("abc")
    ('a', 'b', 'c')
    >>> tuple((1, 2, 3))
    (1, 2, 3)
    元组不可改变，所以除了访问和创建元组外，也没有太多其他操作
    >>> x= 1, 2, 3
    >>> x[1]
    2
    >>> x[0:2]
    (1, 2)   【元组的分片还是元组，就和列表的分片还是列表一样】
    一般来说，列表更能满足对序列的所有需求，以下两个原因使元组不可替代
        @ 元组可以在映射（和集合的成员）时当做键使用，列表不行
        @ 元组作为很多内建函数和方法的返回值存在，必须会对元组进行处理
        只要不改变元组，“处理”元组绝大多数情况是把他们当做列表处理


-------------------------------------------------------------------------------------------------------------------------------

第三章 使用字符串
1、标准的序列操作（索引、分片、乘法、判断成员资格、求长度、取最大最小值）字符串同样适用。字符串不可改变，所以分片赋值是不合法的
>>> name = "zhaohui"
>>> name[4:]="fan"
【报错，因为字符串不可修改】
2、字符串格式化
百分号%可以用作除余操作符，还可用作字符串格式化操作符，适用方式如下:
格式化字符串 % 希望格式化的值（可以使用一个字符串或者数字，也可使用多个值的元组或者字典，一般情况下使用元组，使用其他序列会被解释为一个值）
>>> marry = " %s marry %s"   
>>> couple = "zhaohui","libo"
>>> print marry % couple
 zhaohui marry libo
其中%s称为转换说明符（conversion specifier），标记了需要插入转换值的位置，s表示值会被格式化为字符串，如果不是字符串，会用str将其转换为字符串
如果要在格式化字符串里面包括百分号，必须使用%%
格式化浮点数，用%f，%.2f表示保留两位小数位数
    string模块提供了另外一种格式化值的方法：模板字符串
        substitute这个模板方法会用传递进来的关键字参数foo替换字符串中的$foo,如下
        >>> from string import Template
        >>> s = Template("$x marry $y")
        >>> s.substitute(x="zhaohui",y="libo")
        'zhaohui marry libo'
        如果替换字段是单词的一部分那么参数名就必须用花括号括起来
        >>> from string import Template
        >>> s = Template("${x}hui marry $y")
        >>> s.substitute(x="hui",y="libo")
        可以使用$$插入美元符号
        除了关键字参数之外，还可以使用字典变量提供值/名称对
        >>> from string import Template
        >>> s = Template("$x marry $y")
        >>> d ={}
        >>> d['x']="zhaohui"
        >>> d['y']="libo"
        >>> s.substitute(d)
        'zhaohui marry libo'
        方法safe_substitute()不会因为缺少值或不正确使用$字符而出错
详细字符串格式：
    （注意顺序）
    @ “%”：标记转换说明符的开始
    @ 转换标志（可选）：
        - 表示左对齐
        + 表示在转换值之前要加上正负号
        “ ” 空白字符表示正数之前要保留空格
        0 表示转换值若位数不够则用0填充
    @ 最小字段宽度（可选）：
        转换后的字符串至少应该具有该值指定的宽度。
        如果是 * ，宽度会从元组中读出
    @ 点（.）后跟随精度值（可选）：
        如果转换的是实数，精度值就表示出现在小数点后的位数
        如果转换的是字符串，那么该数字就表示最大字段宽度
        如果是 * ，精度会从元组中读出
    @ 转换类型（见46页的表）
3、字符串方法
字符串方法完全来源于string模块
有用的字符串常量：
    string.digits : 包含0-9的字符串
    string.letters : 包含所有字符（大写和小写）的字符串 【具体值取决于Python所配置的语言，如果确定自己使用ASCII，可以在变量中使用ascii前缀】
    string.lowercase : 包含所有小写字符的字符串
    string.printable : 包含所有可打印字符的字符串
    string.punctuation : 包含所有标点的字符串
    string.uppercase : 包含所有大写字母的字符串
@ find方法：在较长字符串中查找子字符串，并返回子串所在位置的最左端索引，如果没找到，返回-1
>>> str1 = "libo loves zhaohui"
>>> str1.find("zhaohui")
11
（在python2.3以前，in操作符只能用来查找字符串中的单个字符）
find方法还可设置查找的起点和终点
>>> str1 = "libo loves zhaohui"
>>> str1.find("zhaohui",1,11)  【查找范围包含第一个索引，不含第二个索引，这是python的惯例】
-1
@ join方法：非常重要的字符串方法，是split方法的逆方法，用于在队列中添加元素，需要添加的队列元素必须是字符串
>>> seq = [1, 2, 3, 4, 5]
>>> sep = '+'
>>> sep.join(seq)
【报错，需要添加的队列元素必须是字符串】
>>> import string
>>> seq = list(string.digits)
>>> seq.pop(0)
'0'
>>> seq
['1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> sep = '+'
>>> sep.join(seq)
'1+2+3+4+5+6+7+8+9'
@ lower方法：返回字符串的小写字母版
>>> "Zhaohui".lower()
'zhaohui'
@ title方法：将字符串转换为标题（即所有单词的首字母大写，而其他字母小写，但是它使用的单词划分方法可能会得到并不自然的结果）
>>> "that's all folks".title()
"That'S All Folks"
@ string模块的capwords函数：
>>> import string
>>> string.capwords("that's all folks")
"That's All Folks"
如果要得到正确首字母大写的标题，还得自己把握
@ replace方法：返回某字符串的所有匹配项均被替换之后得到的字符串
>>> "Zhaofan and lifan are married".replace("fan",'hui')
'Zhaohui and lihui are married'
@ spilt方法：将字符串分割成序列
>>> '1+2+3+4+5+6+7+8+9'.split('+')
['1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> 'Using the default'.split() 【不提供任何分隔符，会把所有空格、制表、换行作为分隔符】
['Using','the','default']
>>> "zhao    huia    sdj  \t szjo   \n".split()
['zhao', 'huia', 'sdj', 'szjo']
@ strip方法：返回去除两侧（不包括内部）空格的字符串
>>> "   zhaohui is beautiful    ".strip()
"zhaohui is beautiful"
可以指定要去除的字符，把他们列为参数即可
>>> " * * * ! * zhaohui * * is * * beautiful * ! * * *".strip(" *!")
'zhaohui * * is * * beautiful'
@ translate方法：可以替换字符串中的某些部分，与replace不同的是，translate只处理单个字符，优势在于可以同时进行多个替换，有时比replace高效
使用translate转换之前，需要一张转换表
转换表是以某字符替换某字符的对应关系，可以使用string模块的maketrans函数
maketrans函数接受两个参数：两个等长的字符串，表示第一个字符串中的每个字符都用第二个字符串中相同位置的字符替换，如
转换表是包含替换ASCII字符集中256个字符的替换字母的字符串
>>> from string import maketrans
>>> table = maketrans('cs','kz')
>>> len(table)
256
>>> table[97:123]
'abkdefghijklmnopqrztuvwxyz'
>>> maketrans('','')[97:123]
'abcdefghijklmnopqrstuvwxyz'
创建这个转换表后，可以将它用作translate方法的参数，进行字符串的转换如下：
>>> "this is an incredible test".translate(table)
'thiz iz an inkredible tezt'
translate的第二个参数是可选的，这个参数是用来指定需要删除的字符，比如删除所有空格
>>> 'this is an incredible test'.translate(table,' ')
'thizizaninkredibletezt'
lower字符串方法只会把英文字母转换为小写，如果需要小写挪威字母，可以利用translate，具体见53页

--------------------------------------------------------------------------------------------------------------------------------

第四章：字典（列表、字符串和字典是Python中最重要的3中数据类型）
1、通过名字引用值的数据结构，叫做映射（mapping）。字典是Python中唯一内建的映射类型
2、字典里的值没有特殊的顺序，但都存储在一个特定的键里（Key），键可以是数字、字符串甚至是元组
3、电话号码（以及其他可能以0开头的数字）应该表示为数字字符串，而不是整数
4、创建和使用字典
通过以下方式创建字典：
phonebook={'Alice':'2341','Beth':'9102','Cecil':'3258'}
字典有多个键及与其对应的值构成的对组成（我们也把键/值对称为项）
每个键和他们的值用冒号（:）隔开，项之间用逗号（,）隔开，字典是由一对大括号括起来。
空字典（不包括任何项）用两个大括号括起来，像{}
字典中的键是唯一的（其他映射类型也是如此），但值不唯一
5、dict函数
可以用dict函数，通过其他映射（比如其他字典）或者（键，值）这样的序列对建立字典
>>> item = [('name','zhaohui'),('age',19)]
>>> d = dict(item)
>>> d
{'age': 19, 'name': 'zhaohui'}
>>> d['name']
'zhaohui'
dict函数也可用关键字参数来创建字典
>>> d = dict(name = 'zhahui', age = 18)
>>> d
{'age': 18, 'name': 'zhahui'}
无参的dict函数返回一个空字典
>>> dict()
{}
6、基本字典操作
字典的基本行为在很多方面与序列（sequence）相似
@ len(d) :返回d中项（键值对）的数量
@ d[k] :返回关联到键k上的值
@ d[k]=v :将值v关联到键k上
@ del d[k] :删除键为k的项
@ k in d :检查d中是否有含有键为k的项
字典和列表的重要区别：
@ 键类型：字典的键不一定为整型数据，可能是其他不可变类型，比如浮点型（实型）、字符串或者元组
@ 自动添加：即使那个键起初不在字典里，也可以为他分配一个值
@ 成员资格：表达式 k in d （d为字典）查找的是键，而不是值；表达式 v in l （l为列表）查找的是值
在字典中检查键成员资格比在列表中检查值的成员资格更高效，数据结构的规模越大，两者的而效率差距越明显
